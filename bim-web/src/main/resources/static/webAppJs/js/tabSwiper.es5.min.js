'use strict';
var _createClass = function () {
    function a(b, c) {
        for (var f, d = 0; d < c.length; d++) f = c[d], f.enumerable = f.enumerable || !1, f.configurable = !0, 'value' in f && (f.writable = !0), Object.defineProperty(b, f.key, f)
    }
    return function (b, c, d) {
        return c && a(b.prototype, c), d && a(b, d), b
    }
}();

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError('Cannot call a class as a function')
}(function (a) {
    function c(f, g, h) {
        f.style.transform = 'translate(' + g + 'px, ' + h + 'px)', f.style.WebkitTransform = 'translate(' + g + 'px, ' + h + 'px)'
    }
    var d = function () {
        function f(g, h) {
            _classCallCheck(this, f), this._nowIndex = 0, this.ele = g, this.width = g.clientWidth, this.height = g.clientHeight, this.totalWidth = 0, this.box = g.querySelector('.box'), this.containers = g.querySelectorAll('.tab-container'), this.direction = '', this.scrollTop = 0, this.options = h, this.prohibitPull = !1, this.startY = 0, this.startX = 0, this.isBottom = !1, this.disX = 0, this.disY = 0, this.pullDownHtml = g.querySelector('.pullDownHtml'), this.pullUpHtml = g.querySelector('.pullUpHtml'), this.pullDownHtmlHeight = 0, this.pullUpHtmlHeight = 0, this.left = 0, this.init()
        }
        return _createClass(f, [{
            key: 'nowIndex',
            get: function get() {
                return this._nowIndex
            },
            set: function set(g) {
                g === this._nowIndex || (this._nowIndex = g, this.options.onEnd && this.options.onEnd(g))
            }
        }]), _createClass(f, [{
            key: 'init',
            value: function init() {
                var g = this;
                this.options.xThreshold = this.options.xThreshold || 0.25, this.ele.style.overflow = 'hidden', this.ele.style.position = 'relative', this.box.style.height = '100%', this.box.style.width = 100 * this.containers.length + 'vw', this.box.style.float = 'left', this.box.style.transition = 'all ' + this.options.speed / 1e3 + 's', this.box.style.position = 'relative', this.box.style.zIndex = 2, this.totalWidth = this.box.clientWidth, [].forEach.call(this.containers, function (h) {
                    h.style.float = 'left', h.style.width = '100vw', h.style.height = '100%', h.style.overflow = 'auto', h.style.WebkitOverflowScrolling = 'touch', h.addEventListener('touchstart', function (j) {
                        g.startY = j.touches[0].clientY, g.startX = j.touches[0].clientX
                    }, !1), h.addEventListener('touchmove', function (j) {
                        g.scrollTop = g.containers[g.nowIndex].scrollTop, g.isBottom = g.containers[g.nowIndex].querySelector('.s-pull').clientHeight <= g.scrollTop + g.height;
                        var k = j.touches[0].clientY - g.startY,
                            l = j.touches[0].clientX - g.startX;
                        (0 < k && 0 == h.scrollTop || 0 > k && g.isBottom) && j.preventDefault(), Math.abs(k) < Math.abs(l) && j.preventDefault()
                    }, !1)
                }), this.options.isPullDown && (this.pullDownHtml.style.position = 'absolute', this.pullDownHtml.style.width = '100%', this.pullDownHtmlHeight = this.pullDownHtml.clientHeight), this.options.isPullUp && (this.pullUpHtml.style.position = 'absolute', this.pullUpHtml.style.width = '100%', this.pullUpHtml.style.bottom = '0', this.pullUpHtmlHeight = this.pullUpHtml.clientHeight), touch.on(this.box, 'drag', function (h) {
                    g.direction = h.direction, g.touchmove(h), g.options.onTouchmove && g.options.onTouchmove(g.nowIndex, h)
                }), this.options.closeInertia || touch.on(this.box, 'swipe', function (h) {
                    g.swipe(h)
                }), touch.on(this.box, 'touchend', function (h) {
                    g.touchend(h)
                }), this.changePage(this.options.defaultPage || 0), this.options.initCb && this.options.initCb()
            }
        }, {
            key: 'touchmove',
            value: function touchmove(g) {
                if (this.box.style.transition = 'none', ('left' === g.direction || 'right' === g.direction) && !this.disY) this.disX = g.distanceX, c(this.box, this.left + this.disX, this.disY);
                else if (!this.disX && !this.prohibitPull) {
                    if ('down' === g.direction && !this.options.isPullDown) return;
                    if ('up' === g.direction && !this.options.isPullUp) return;
                    (0 >= this.scrollTop && 'down' === this.direction || this.isBottom && 'up' === this.direction) && (this.disY = g.distanceY, c(this.box, this.left + this.disX, this.disY))
                }
            }
        }, {
            key: 'touchend',
            value: function touchend(event) {
                if(this.direction != ""){
                    // console.log(JSON.stringify(this))
                    this.box.style.transition = 'all ' + this.options.speed / 1e3 + 's',  this.prohibitPull || (Math.abs(this.disY) < this.options.threshold && (this.disY = 0, c(this.box, this.left + this.disX, this.disY)), 0 >= this.scrollTop && 'down' === this.direction && this.disY >= this.options.threshold ? (this.disY = this.pullDownHtmlHeight, this.prohibitPull = !0, this.pullDownHtml.style.visibility = 'visible', this.options.onRefreshStart && this.options.onRefreshStart(this.nowIndex)) : this.isBottom && 'up' === this.direction && Math.abs(this.disY) > this.options.threshold && (this.disY = -this.pullUpHtmlHeight, this.prohibitPull = !0, this.pullUpHtml.style.visibility = 'visible', this.options.onLoadStart && this.options.onLoadStart(this.nowIndex))), Math.abs(this.disX) < this.width * this.options.xThreshold ? (c(this.box, this.left, this.disY), this.disX = 0) : (this.left += this.disX / Math.abs(this.disX) * this.width, 0 < this.left && (this.left = 0), this.left <= -this.totalWidth && (this.left = -(this.totalWidth - this.width)), c(this.box, this.left, this.disY)), this.direction = '', this.nowIndex = Math.abs(this.left) / this.width
                }
            }
        }, {
            key: 'swipe',
            value: function swipe(g) {
                !(1 > g.factor) || this.disX || this.disY || ('left' === g.direction ? this.left -= this.width : 'right' === g.direction && (this.left += this.width), 0 < this.left && (this.left = 0), this.left <= -this.totalWidth && (this.left = -(this.totalWidth - this.width)), c(this.box, this.left, this.disY)), this.disX = 0, this.nowIndex = Math.abs(this.left) / this.width
            }
        }, {
            key: 'pullEnd',
            value: function pullEnd(g) {
                g && g(this.nowIndex), c(this.box, this.left, 0), this.disY = 0, this.prohibitPull = !1
            }
        }, {
            key: 'changePage',
            value: function changePage(g) {
                this.prohibitPull || (this.left = -g * this.width, c(this.box, this.left, this.disY), this.nowIndex = Math.abs(this.left) / this.width)
            }
        }]), f
    }();
    a.TabSwiper = d
})(window, document);